/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.materialquestionmod.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.materialquestionmod.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.materialquestionmod.model.AddQuestionRequestWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.AddQuestionResponseWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.DeleteQuestionRequestWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.DeleteQuestionResponseWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.UpdateCategoryRequestWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.UpdateCategoryResponseWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.UpdatePutawayRequestWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.UpdatePutawayResponseWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.UpdateQuestionRequestWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.UpdateQuestionResponseWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.UpdateRankRequestWrapper;
import com.baidu.dev2.api.sdk.materialquestionmod.model.UpdateRankResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MaterialQuestionModService {
  private ApiClient apiClient;

  public MaterialQuestionModService() {
    this(Configuration.getDefaultApiClient());
  }

  public MaterialQuestionModService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addQuestionRequestWrapper  (required)
   * @return AddQuestionResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddQuestionResponseWrapper addQuestion(AddQuestionRequestWrapper addQuestionRequestWrapper) throws ApiException {
    Object localVarPostBody = addQuestionRequestWrapper;
    
    // verify the required parameter 'addQuestionRequestWrapper' is set
    if (addQuestionRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addQuestionRequestWrapper' when calling addQuestion");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialQuestionModService/addQuestion";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddQuestionResponseWrapper> localVarReturnType = new TypeReference<AddQuestionResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteQuestionRequestWrapper  (required)
   * @return DeleteQuestionResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteQuestionResponseWrapper deleteQuestion(DeleteQuestionRequestWrapper deleteQuestionRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteQuestionRequestWrapper;
    
    // verify the required parameter 'deleteQuestionRequestWrapper' is set
    if (deleteQuestionRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteQuestionRequestWrapper' when calling deleteQuestion");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialQuestionModService/deleteQuestion";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteQuestionResponseWrapper> localVarReturnType = new TypeReference<DeleteQuestionResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateCategoryRequestWrapper  (required)
   * @return UpdateCategoryResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateCategoryResponseWrapper updateCategory(UpdateCategoryRequestWrapper updateCategoryRequestWrapper) throws ApiException {
    Object localVarPostBody = updateCategoryRequestWrapper;
    
    // verify the required parameter 'updateCategoryRequestWrapper' is set
    if (updateCategoryRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCategoryRequestWrapper' when calling updateCategory");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialQuestionModService/updateCategory";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateCategoryResponseWrapper> localVarReturnType = new TypeReference<UpdateCategoryResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updatePutawayRequestWrapper  (required)
   * @return UpdatePutawayResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdatePutawayResponseWrapper updatePutaway(UpdatePutawayRequestWrapper updatePutawayRequestWrapper) throws ApiException {
    Object localVarPostBody = updatePutawayRequestWrapper;
    
    // verify the required parameter 'updatePutawayRequestWrapper' is set
    if (updatePutawayRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePutawayRequestWrapper' when calling updatePutaway");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialQuestionModService/updatePutaway";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdatePutawayResponseWrapper> localVarReturnType = new TypeReference<UpdatePutawayResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateQuestionRequestWrapper  (required)
   * @return UpdateQuestionResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateQuestionResponseWrapper updateQuestion(UpdateQuestionRequestWrapper updateQuestionRequestWrapper) throws ApiException {
    Object localVarPostBody = updateQuestionRequestWrapper;
    
    // verify the required parameter 'updateQuestionRequestWrapper' is set
    if (updateQuestionRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateQuestionRequestWrapper' when calling updateQuestion");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialQuestionModService/updateQuestion";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateQuestionResponseWrapper> localVarReturnType = new TypeReference<UpdateQuestionResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateRankRequestWrapper  (required)
   * @return UpdateRankResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateRankResponseWrapper updateRank(UpdateRankRequestWrapper updateRankRequestWrapper) throws ApiException {
    Object localVarPostBody = updateRankRequestWrapper;
    
    // verify the required parameter 'updateRankRequestWrapper' is set
    if (updateRankRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateRankRequestWrapper' when calling updateRank");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialQuestionModService/updateRank";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateRankResponseWrapper> localVarReturnType = new TypeReference<UpdateRankResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
