/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.searchfeed.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.searchfeed.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.searchfeed.model.GetAppIdNameFeedRequestWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetAppIdNameFeedResponseWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetAutoBidCostRequestWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetAutoBidCostResponseWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetBizAreaFeedRequestWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetBizAreaFeedResponseWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetCoordinateFeedRequestWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetCoordinateFeedResponseWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetMediaPackagesRequestWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetMediaPackagesResponseWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetMediasRequestWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetMediasResponseWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetOcpcTransFeedRequestWrapper;
import com.baidu.dev2.api.sdk.searchfeed.model.GetOcpcTransFeedResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SearchFeedService {
  private ApiClient apiClient;

  public SearchFeedService() {
    this(Configuration.getDefaultApiClient());
  }

  public SearchFeedService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param getAppIdNameFeedRequestWrapper  (required)
   * @return GetAppIdNameFeedResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetAppIdNameFeedResponseWrapper getAppIdNameFeed(GetAppIdNameFeedRequestWrapper getAppIdNameFeedRequestWrapper) throws ApiException {
    Object localVarPostBody = getAppIdNameFeedRequestWrapper;
    
    // verify the required parameter 'getAppIdNameFeedRequestWrapper' is set
    if (getAppIdNameFeedRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getAppIdNameFeedRequestWrapper' when calling getAppIdNameFeed");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/SearchFeedService/getAppIdNameFeed";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetAppIdNameFeedResponseWrapper> localVarReturnType = new TypeReference<GetAppIdNameFeedResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getAutoBidCostRequestWrapper  (required)
   * @return GetAutoBidCostResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetAutoBidCostResponseWrapper getAutoBidCost(GetAutoBidCostRequestWrapper getAutoBidCostRequestWrapper) throws ApiException {
    Object localVarPostBody = getAutoBidCostRequestWrapper;
    
    // verify the required parameter 'getAutoBidCostRequestWrapper' is set
    if (getAutoBidCostRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getAutoBidCostRequestWrapper' when calling getAutoBidCost");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/SearchFeedService/getAutoBidCost";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetAutoBidCostResponseWrapper> localVarReturnType = new TypeReference<GetAutoBidCostResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getBizAreaFeedRequestWrapper  (required)
   * @return GetBizAreaFeedResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetBizAreaFeedResponseWrapper getBizAreaFeed(GetBizAreaFeedRequestWrapper getBizAreaFeedRequestWrapper) throws ApiException {
    Object localVarPostBody = getBizAreaFeedRequestWrapper;
    
    // verify the required parameter 'getBizAreaFeedRequestWrapper' is set
    if (getBizAreaFeedRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getBizAreaFeedRequestWrapper' when calling getBizAreaFeed");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/SearchFeedService/getBizAreaFeed";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetBizAreaFeedResponseWrapper> localVarReturnType = new TypeReference<GetBizAreaFeedResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getCoordinateFeedRequestWrapper  (required)
   * @return GetCoordinateFeedResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetCoordinateFeedResponseWrapper getCoordinateFeed(GetCoordinateFeedRequestWrapper getCoordinateFeedRequestWrapper) throws ApiException {
    Object localVarPostBody = getCoordinateFeedRequestWrapper;
    
    // verify the required parameter 'getCoordinateFeedRequestWrapper' is set
    if (getCoordinateFeedRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getCoordinateFeedRequestWrapper' when calling getCoordinateFeed");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/SearchFeedService/getCoordinateFeed";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetCoordinateFeedResponseWrapper> localVarReturnType = new TypeReference<GetCoordinateFeedResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getMediaPackagesRequestWrapper  (required)
   * @return GetMediaPackagesResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetMediaPackagesResponseWrapper getMediaPackages(GetMediaPackagesRequestWrapper getMediaPackagesRequestWrapper) throws ApiException {
    Object localVarPostBody = getMediaPackagesRequestWrapper;
    
    // verify the required parameter 'getMediaPackagesRequestWrapper' is set
    if (getMediaPackagesRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getMediaPackagesRequestWrapper' when calling getMediaPackages");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/SearchFeedService/getMediaPackages";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetMediaPackagesResponseWrapper> localVarReturnType = new TypeReference<GetMediaPackagesResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getMediasRequestWrapper  (required)
   * @return GetMediasResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetMediasResponseWrapper getMedias(GetMediasRequestWrapper getMediasRequestWrapper) throws ApiException {
    Object localVarPostBody = getMediasRequestWrapper;
    
    // verify the required parameter 'getMediasRequestWrapper' is set
    if (getMediasRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getMediasRequestWrapper' when calling getMedias");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/SearchFeedService/getMedias";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetMediasResponseWrapper> localVarReturnType = new TypeReference<GetMediasResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getOcpcTransFeedRequestWrapper  (required)
   * @return GetOcpcTransFeedResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetOcpcTransFeedResponseWrapper getOcpcTransFeed(GetOcpcTransFeedRequestWrapper getOcpcTransFeedRequestWrapper) throws ApiException {
    Object localVarPostBody = getOcpcTransFeedRequestWrapper;
    
    // verify the required parameter 'getOcpcTransFeedRequestWrapper' is set
    if (getOcpcTransFeedRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getOcpcTransFeedRequestWrapper' when calling getOcpcTransFeed");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/SearchFeedService/getOcpcTransFeed";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetOcpcTransFeedResponseWrapper> localVarReturnType = new TypeReference<GetOcpcTransFeedResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
