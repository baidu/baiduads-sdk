/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.materialarticle.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.materialarticle.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.materialarticle.model.AddArticleRequestWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.AddArticleResponseWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.DeleteArticleRequestWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.DeleteArticleResponseWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.GetArticleListRequestWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.GetArticleListResponseWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.UpdateArticleRequestWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.UpdateArticleResponseWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.UpdateCategoryRequestWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.UpdateCategoryResponseWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.UpdatePutawayRequestWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.UpdatePutawayResponseWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.UpdateRankRequestWrapper;
import com.baidu.dev2.api.sdk.materialarticle.model.UpdateRankResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MaterialArticleService {
  private ApiClient apiClient;

  public MaterialArticleService() {
    this(Configuration.getDefaultApiClient());
  }

  public MaterialArticleService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addArticleRequestWrapper  (required)
   * @return AddArticleResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddArticleResponseWrapper addArticle(AddArticleRequestWrapper addArticleRequestWrapper) throws ApiException {
    Object localVarPostBody = addArticleRequestWrapper;
    
    // verify the required parameter 'addArticleRequestWrapper' is set
    if (addArticleRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addArticleRequestWrapper' when calling addArticle");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialArticleService/addArticle";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddArticleResponseWrapper> localVarReturnType = new TypeReference<AddArticleResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteArticleRequestWrapper  (required)
   * @return DeleteArticleResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteArticleResponseWrapper deleteArticle(DeleteArticleRequestWrapper deleteArticleRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteArticleRequestWrapper;
    
    // verify the required parameter 'deleteArticleRequestWrapper' is set
    if (deleteArticleRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteArticleRequestWrapper' when calling deleteArticle");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialArticleService/deleteArticle";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteArticleResponseWrapper> localVarReturnType = new TypeReference<DeleteArticleResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getArticleListRequestWrapper  (required)
   * @return GetArticleListResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetArticleListResponseWrapper getArticleList(GetArticleListRequestWrapper getArticleListRequestWrapper) throws ApiException {
    Object localVarPostBody = getArticleListRequestWrapper;
    
    // verify the required parameter 'getArticleListRequestWrapper' is set
    if (getArticleListRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getArticleListRequestWrapper' when calling getArticleList");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialArticleService/getArticleList";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetArticleListResponseWrapper> localVarReturnType = new TypeReference<GetArticleListResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateArticleRequestWrapper  (required)
   * @return UpdateArticleResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateArticleResponseWrapper updateArticle(UpdateArticleRequestWrapper updateArticleRequestWrapper) throws ApiException {
    Object localVarPostBody = updateArticleRequestWrapper;
    
    // verify the required parameter 'updateArticleRequestWrapper' is set
    if (updateArticleRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateArticleRequestWrapper' when calling updateArticle");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialArticleService/updateArticle";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateArticleResponseWrapper> localVarReturnType = new TypeReference<UpdateArticleResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateCategoryRequestWrapper  (required)
   * @return UpdateCategoryResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateCategoryResponseWrapper updateCategory(UpdateCategoryRequestWrapper updateCategoryRequestWrapper) throws ApiException {
    Object localVarPostBody = updateCategoryRequestWrapper;
    
    // verify the required parameter 'updateCategoryRequestWrapper' is set
    if (updateCategoryRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCategoryRequestWrapper' when calling updateCategory");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialArticleService/updateCategory";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateCategoryResponseWrapper> localVarReturnType = new TypeReference<UpdateCategoryResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updatePutawayRequestWrapper  (required)
   * @return UpdatePutawayResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdatePutawayResponseWrapper updatePutaway(UpdatePutawayRequestWrapper updatePutawayRequestWrapper) throws ApiException {
    Object localVarPostBody = updatePutawayRequestWrapper;
    
    // verify the required parameter 'updatePutawayRequestWrapper' is set
    if (updatePutawayRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePutawayRequestWrapper' when calling updatePutaway");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialArticleService/updatePutaway";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdatePutawayResponseWrapper> localVarReturnType = new TypeReference<UpdatePutawayResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateRankRequestWrapper  (required)
   * @return UpdateRankResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateRankResponseWrapper updateRank(UpdateRankRequestWrapper updateRankRequestWrapper) throws ApiException {
    Object localVarPostBody = updateRankRequestWrapper;
    
    // verify the required parameter 'updateRankRequestWrapper' is set
    if (updateRankRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateRankRequestWrapper' when calling updateRank");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/MaterialArticleService/updateRank";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateRankResponseWrapper> localVarReturnType = new TypeReference<UpdateRankResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
