/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.campaignshopping.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.campaignshopping.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.campaignshopping.model.AddCampaignShoppingRequestWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.AddCampaignShoppingResponseWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.CopyCampaignShoppingRequestWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.CopyCampaignShoppingResponseWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.DeleteCampaignShoppingRequestWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.DeleteCampaignShoppingResponseWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.GetAnchorRequestWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.GetAnchorResponseWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.GetCampaignShoppingRequestWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.GetCampaignShoppingResponseWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.GetInterestsRequestWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.GetInterestsResponseWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.GetProductRequestWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.GetProductResponseWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.UpdateCampaignShoppingRequestWrapper;
import com.baidu.dev2.api.sdk.campaignshopping.model.UpdateCampaignShoppingResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CampaignShoppingService {
  private ApiClient apiClient;

  public CampaignShoppingService() {
    this(Configuration.getDefaultApiClient());
  }

  public CampaignShoppingService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addCampaignShoppingRequestWrapper  (required)
   * @return AddCampaignShoppingResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddCampaignShoppingResponseWrapper addCampaignShopping(AddCampaignShoppingRequestWrapper addCampaignShoppingRequestWrapper) throws ApiException {
    Object localVarPostBody = addCampaignShoppingRequestWrapper;
    
    // verify the required parameter 'addCampaignShoppingRequestWrapper' is set
    if (addCampaignShoppingRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addCampaignShoppingRequestWrapper' when calling addCampaignShopping");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CampaignShoppingService/addCampaignShopping";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddCampaignShoppingResponseWrapper> localVarReturnType = new TypeReference<AddCampaignShoppingResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param copyCampaignShoppingRequestWrapper  (required)
   * @return CopyCampaignShoppingResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public CopyCampaignShoppingResponseWrapper copyCampaignShopping(CopyCampaignShoppingRequestWrapper copyCampaignShoppingRequestWrapper) throws ApiException {
    Object localVarPostBody = copyCampaignShoppingRequestWrapper;
    
    // verify the required parameter 'copyCampaignShoppingRequestWrapper' is set
    if (copyCampaignShoppingRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'copyCampaignShoppingRequestWrapper' when calling copyCampaignShopping");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CampaignShoppingService/copyCampaignShopping";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CopyCampaignShoppingResponseWrapper> localVarReturnType = new TypeReference<CopyCampaignShoppingResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteCampaignShoppingRequestWrapper  (required)
   * @return DeleteCampaignShoppingResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteCampaignShoppingResponseWrapper deleteCampaignShopping(DeleteCampaignShoppingRequestWrapper deleteCampaignShoppingRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteCampaignShoppingRequestWrapper;
    
    // verify the required parameter 'deleteCampaignShoppingRequestWrapper' is set
    if (deleteCampaignShoppingRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteCampaignShoppingRequestWrapper' when calling deleteCampaignShopping");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CampaignShoppingService/deleteCampaignShopping";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteCampaignShoppingResponseWrapper> localVarReturnType = new TypeReference<DeleteCampaignShoppingResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getAnchorRequestWrapper  (required)
   * @return GetAnchorResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetAnchorResponseWrapper getAnchor(GetAnchorRequestWrapper getAnchorRequestWrapper) throws ApiException {
    Object localVarPostBody = getAnchorRequestWrapper;
    
    // verify the required parameter 'getAnchorRequestWrapper' is set
    if (getAnchorRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getAnchorRequestWrapper' when calling getAnchor");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CampaignShoppingService/getAnchor";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetAnchorResponseWrapper> localVarReturnType = new TypeReference<GetAnchorResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getCampaignShoppingRequestWrapper  (required)
   * @return GetCampaignShoppingResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetCampaignShoppingResponseWrapper getCampaignShopping(GetCampaignShoppingRequestWrapper getCampaignShoppingRequestWrapper) throws ApiException {
    Object localVarPostBody = getCampaignShoppingRequestWrapper;
    
    // verify the required parameter 'getCampaignShoppingRequestWrapper' is set
    if (getCampaignShoppingRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getCampaignShoppingRequestWrapper' when calling getCampaignShopping");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CampaignShoppingService/getCampaignShopping";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetCampaignShoppingResponseWrapper> localVarReturnType = new TypeReference<GetCampaignShoppingResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getInterestsRequestWrapper  (required)
   * @return GetInterestsResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetInterestsResponseWrapper getInterests(GetInterestsRequestWrapper getInterestsRequestWrapper) throws ApiException {
    Object localVarPostBody = getInterestsRequestWrapper;
    
    // verify the required parameter 'getInterestsRequestWrapper' is set
    if (getInterestsRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getInterestsRequestWrapper' when calling getInterests");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CampaignShoppingService/getInterests";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetInterestsResponseWrapper> localVarReturnType = new TypeReference<GetInterestsResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getProductRequestWrapper  (required)
   * @return GetProductResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetProductResponseWrapper getProduct(GetProductRequestWrapper getProductRequestWrapper) throws ApiException {
    Object localVarPostBody = getProductRequestWrapper;
    
    // verify the required parameter 'getProductRequestWrapper' is set
    if (getProductRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getProductRequestWrapper' when calling getProduct");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CampaignShoppingService/getProduct";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetProductResponseWrapper> localVarReturnType = new TypeReference<GetProductResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateCampaignShoppingRequestWrapper  (required)
   * @return UpdateCampaignShoppingResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateCampaignShoppingResponseWrapper updateCampaignShopping(UpdateCampaignShoppingRequestWrapper updateCampaignShoppingRequestWrapper) throws ApiException {
    Object localVarPostBody = updateCampaignShoppingRequestWrapper;
    
    // verify the required parameter 'updateCampaignShoppingRequestWrapper' is set
    if (updateCampaignShoppingRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCampaignShoppingRequestWrapper' when calling updateCampaignShopping");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CampaignShoppingService/updateCampaignShopping";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateCampaignShoppingResponseWrapper> localVarReturnType = new TypeReference<UpdateCampaignShoppingResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
