"""
    dev2 api schema

    'dev2.baidu.com' api schema  # noqa: E501

Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from baiduads.api_client import ApiClient, Endpoint as _Endpoint
from baiduads.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from baiduads.campaignshopping.model.add_campaign_shopping_request_wrapper import AddCampaignShoppingRequestWrapper
from baiduads.campaignshopping.model.add_campaign_shopping_response_wrapper import AddCampaignShoppingResponseWrapper
from baiduads.campaignshopping.model.copy_campaign_shopping_request_wrapper import CopyCampaignShoppingRequestWrapper
from baiduads.campaignshopping.model.copy_campaign_shopping_response_wrapper import CopyCampaignShoppingResponseWrapper
from baiduads.campaignshopping.model.delete_campaign_shopping_request_wrapper import DeleteCampaignShoppingRequestWrapper
from baiduads.campaignshopping.model.delete_campaign_shopping_response_wrapper import DeleteCampaignShoppingResponseWrapper
from baiduads.campaignshopping.model.get_anchor_request_wrapper import GetAnchorRequestWrapper
from baiduads.campaignshopping.model.get_anchor_response_wrapper import GetAnchorResponseWrapper
from baiduads.campaignshopping.model.get_campaign_shopping_request_wrapper import GetCampaignShoppingRequestWrapper
from baiduads.campaignshopping.model.get_campaign_shopping_response_wrapper import GetCampaignShoppingResponseWrapper
from baiduads.campaignshopping.model.get_interests_request_wrapper import GetInterestsRequestWrapper
from baiduads.campaignshopping.model.get_interests_response_wrapper import GetInterestsResponseWrapper
from baiduads.campaignshopping.model.get_product_request_wrapper import GetProductRequestWrapper
from baiduads.campaignshopping.model.get_product_response_wrapper import GetProductResponseWrapper
from baiduads.campaignshopping.model.update_campaign_shopping_request_wrapper import UpdateCampaignShoppingRequestWrapper
from baiduads.campaignshopping.model.update_campaign_shopping_response_wrapper import UpdateCampaignShoppingResponseWrapper


class CampaignShoppingService(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_campaign_shopping_endpoint = _Endpoint(
            settings={
                'response_type': (AddCampaignShoppingResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/CampaignShoppingService/addCampaignShopping',
                'operation_id': 'add_campaign_shopping',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_campaign_shopping_request_wrapper',
                ],
                'required': [
                    'add_campaign_shopping_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_campaign_shopping_request_wrapper':
                        (AddCampaignShoppingRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_campaign_shopping_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.copy_campaign_shopping_endpoint = _Endpoint(
            settings={
                'response_type': (CopyCampaignShoppingResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/CampaignShoppingService/copyCampaignShopping',
                'operation_id': 'copy_campaign_shopping',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'copy_campaign_shopping_request_wrapper',
                ],
                'required': [
                    'copy_campaign_shopping_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'copy_campaign_shopping_request_wrapper':
                        (CopyCampaignShoppingRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'copy_campaign_shopping_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_campaign_shopping_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteCampaignShoppingResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/CampaignShoppingService/deleteCampaignShopping',
                'operation_id': 'delete_campaign_shopping',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'delete_campaign_shopping_request_wrapper',
                ],
                'required': [
                    'delete_campaign_shopping_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delete_campaign_shopping_request_wrapper':
                        (DeleteCampaignShoppingRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delete_campaign_shopping_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_anchor_endpoint = _Endpoint(
            settings={
                'response_type': (GetAnchorResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/CampaignShoppingService/getAnchor',
                'operation_id': 'get_anchor',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_anchor_request_wrapper',
                ],
                'required': [
                    'get_anchor_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_anchor_request_wrapper':
                        (GetAnchorRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_anchor_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_campaign_shopping_endpoint = _Endpoint(
            settings={
                'response_type': (GetCampaignShoppingResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/CampaignShoppingService/getCampaignShopping',
                'operation_id': 'get_campaign_shopping',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_campaign_shopping_request_wrapper',
                ],
                'required': [
                    'get_campaign_shopping_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_campaign_shopping_request_wrapper':
                        (GetCampaignShoppingRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_campaign_shopping_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_interests_endpoint = _Endpoint(
            settings={
                'response_type': (GetInterestsResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/CampaignShoppingService/getInterests',
                'operation_id': 'get_interests',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_interests_request_wrapper',
                ],
                'required': [
                    'get_interests_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_interests_request_wrapper':
                        (GetInterestsRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_interests_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_product_endpoint = _Endpoint(
            settings={
                'response_type': (GetProductResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/CampaignShoppingService/getProduct',
                'operation_id': 'get_product',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_product_request_wrapper',
                ],
                'required': [
                    'get_product_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_product_request_wrapper':
                        (GetProductRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_product_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_campaign_shopping_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateCampaignShoppingResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/CampaignShoppingService/updateCampaignShopping',
                'operation_id': 'update_campaign_shopping',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_campaign_shopping_request_wrapper',
                ],
                'required': [
                    'update_campaign_shopping_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_campaign_shopping_request_wrapper':
                        (UpdateCampaignShoppingRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_campaign_shopping_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def add_campaign_shopping(
        self,
        add_campaign_shopping_request_wrapper,
        **kwargs
    ):
        """add_campaign_shopping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_campaign_shopping(add_campaign_shopping_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            add_campaign_shopping_request_wrapper (AddCampaignShoppingRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AddCampaignShoppingResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['add_campaign_shopping_request_wrapper'] = \
            add_campaign_shopping_request_wrapper
        return self.add_campaign_shopping_endpoint.call_with_http_info(**kwargs)

    def copy_campaign_shopping(
        self,
        copy_campaign_shopping_request_wrapper,
        **kwargs
    ):
        """copy_campaign_shopping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copy_campaign_shopping(copy_campaign_shopping_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            copy_campaign_shopping_request_wrapper (CopyCampaignShoppingRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CopyCampaignShoppingResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['copy_campaign_shopping_request_wrapper'] = \
            copy_campaign_shopping_request_wrapper
        return self.copy_campaign_shopping_endpoint.call_with_http_info(**kwargs)

    def delete_campaign_shopping(
        self,
        delete_campaign_shopping_request_wrapper,
        **kwargs
    ):
        """delete_campaign_shopping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_campaign_shopping(delete_campaign_shopping_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            delete_campaign_shopping_request_wrapper (DeleteCampaignShoppingRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteCampaignShoppingResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['delete_campaign_shopping_request_wrapper'] = \
            delete_campaign_shopping_request_wrapper
        return self.delete_campaign_shopping_endpoint.call_with_http_info(**kwargs)

    def get_anchor(
        self,
        get_anchor_request_wrapper,
        **kwargs
    ):
        """get_anchor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anchor(get_anchor_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_anchor_request_wrapper (GetAnchorRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetAnchorResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_anchor_request_wrapper'] = \
            get_anchor_request_wrapper
        return self.get_anchor_endpoint.call_with_http_info(**kwargs)

    def get_campaign_shopping(
        self,
        get_campaign_shopping_request_wrapper,
        **kwargs
    ):
        """get_campaign_shopping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_campaign_shopping(get_campaign_shopping_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_campaign_shopping_request_wrapper (GetCampaignShoppingRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetCampaignShoppingResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_campaign_shopping_request_wrapper'] = \
            get_campaign_shopping_request_wrapper
        return self.get_campaign_shopping_endpoint.call_with_http_info(**kwargs)

    def get_interests(
        self,
        get_interests_request_wrapper,
        **kwargs
    ):
        """get_interests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_interests(get_interests_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_interests_request_wrapper (GetInterestsRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetInterestsResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_interests_request_wrapper'] = \
            get_interests_request_wrapper
        return self.get_interests_endpoint.call_with_http_info(**kwargs)

    def get_product(
        self,
        get_product_request_wrapper,
        **kwargs
    ):
        """get_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_product(get_product_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_product_request_wrapper (GetProductRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetProductResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_product_request_wrapper'] = \
            get_product_request_wrapper
        return self.get_product_endpoint.call_with_http_info(**kwargs)

    def update_campaign_shopping(
        self,
        update_campaign_shopping_request_wrapper,
        **kwargs
    ):
        """update_campaign_shopping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_campaign_shopping(update_campaign_shopping_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            update_campaign_shopping_request_wrapper (UpdateCampaignShoppingRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateCampaignShoppingResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['update_campaign_shopping_request_wrapper'] = \
            update_campaign_shopping_request_wrapper
        return self.update_campaign_shopping_endpoint.call_with_http_info(**kwargs)

